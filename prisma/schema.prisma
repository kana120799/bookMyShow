generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enums
enum Role {
  CUSTOMER
  ADMIN
  GUEST
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELED
}

enum SeatType {
  REGULAR
  PREMIUM
  VIP
  SPACE
}

enum PaymentMode {
  CARD
  UPI
}

enum PaymentStatus {
  UNPAID
  PENDING
  COMPLETED
  FAILED
  DECLINED
  CANCELED
  REFUNDED
}

// User Model
model User {
  id        String  @id @default(uuid())
  name      String
  email     String  @unique @db.VarChar(200)
  phone     String  @unique @db.VarChar(10)
  password  String  @db.VarChar(200)
  role      Role    @default(CUSTOMER)
  bookings  Booking[] 
  notifications Notification[]
  createdAt DateTime @default(now())
}

// Address Model
model Address {
  id       String @id @default(uuid())
  street   String
  city     String
  state    String
  zipCode  String
  cinema   Cinema?
}

// Cinema Model
model Cinema {
  id        String @id @default(uuid())
  name      String
  addressId String? @unique
  address   Address? @relation(fields: [addressId], references: [id],onDelete: Cascade) // If Cinema is delete, CinemaHall and Show records also be deleted.
  halls     CinemaHall[]
}

// Cinema Hall (Theatres inside a Cinema)
model CinemaHall {
  id         String @id @default(uuid())
  name       String
  totalSeats Int
  cinemaId   String
  cinema     Cinema @relation(fields: [cinemaId], references: [id])
  seats      CinemaHallSeat[]
  shows      Show[]
}

// Movie Model
model Movie {
  id           String  @id @default(uuid())
  title        String
  description  String
  durationMins Int
  language     String
  releaseDate  DateTime
  country      String
  genre        String
  rating       Float?  @default(0.0)
  shows        Show[]
  
}

// Show Model (Screening of a Movie in a Hall)
model Show {
  id           String @id @default(uuid())
  movieId      String
  cinemaHallId String
  startTime    DateTime
  movie        Movie   @relation(fields: [movieId], references: [id])
  cinemaHall   CinemaHall @relation(fields: [cinemaHallId], references: [id])
  seats        ShowSeat[]
  bookings     Booking[]
}

// CinemaHallSeat (Physical Seats in a Hall)
model CinemaHallSeat {
  id        String @id @default(uuid())
  seatNumber String // e.g., "A1",
  row       Int  
  column    Int
  type      SeatType
  hallId    String
  hall      CinemaHall @relation(fields: [hallId], references: [id])
  showSeats ShowSeat[]

  @@unique([hallId, row, column]) // Prevents duplicate seat positions
}

// ShowSeat (Seats available for booking in a Show)
model ShowSeat {
  id         String @id @default(uuid())
  isReserved Boolean @default(false)
  status     String @default("AVAILABLE") // e.g., "AVAILABLE", "RESERVED", "BOOKED"
  price      Float
  showId     String
  show       Show @relation(fields: [showId], references: [id])
  hallSeatId String
  hallSeat   CinemaHallSeat @relation(fields: [hallSeatId], references: [id])
  bookingSeats BookingSeat[]
}

// Booking Model (Customer's Booking)
model Booking {
  id          String  @id @default(uuid())
  userId      String
  user        User @relation(fields: [userId], references: [id])
  showId      String
  show        Show @relation(fields: [showId], references: [id])
  seats       BookingSeat[]
  status      BookingStatus @default(PENDING)
  payment     Payment?
  ticket      MailTicket?
}

// BookingSeat (Maps ShowSeats to a Booking)
model BookingSeat {
  id         String @id @default(uuid())
  bookingId  String
  booking    Booking @relation(fields: [bookingId], references: [id])
  showSeatId String
  showSeat   ShowSeat @relation(fields: [showSeatId], references: [id])
}

// Payment Model (For Booking Transactions)
model Payment {
  id           String @id @default(uuid())
  amount       Float
  mode         PaymentMode
  createdOn    DateTime @default(now())
  status       PaymentStatus
  transactionId String?
  bookingId    String @unique
  booking      Booking @relation(fields: [bookingId], references: [id])
}

// Notification Model (For User Messages)
model Notification {
  id          String @id @default(uuid())
  createdOn   DateTime @default(now())
  content     String
  userId      String
  user        User @relation(fields: [userId], references: [id])
}

// Coupon Model (Discount Codes)
model Coupon {
  id         String @id @default(uuid())
  code       String @unique
  discount       Float
  minPurchaseAmount Float? @default(0.0)
  maxDiscount    Float? @default(0.0)
  validTill      DateTime
  applicableShows String[] // List of show IDs
}

// MailTicket (For Sending E-Tickets)
model MailTicket {
  id         String @id @default(uuid())
  bookingId  String @unique
  booking    Booking @relation(fields: [bookingId], references: [id])
  email      String
  sentAt     DateTime @default(now())
}
